/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Random;

public class Library {
    public boolean someLibraryMethod() {


        return true;
    }

    public static int[] roll(int n) {
        int[] rolls = new int[n];
        Random rand = new Random();
        //takes an integer param 'n' and returns array of 'n' random #s between 1 & 6
        for (int i= 0; i < n; i++) {
            rolls[i] = rand.nextInt(6) + 1;
        }//using for loop to generate 'n' random numbers and store into rolls array by calling nextInt method
        return rolls;

    }

    //taking array of integers as a parameter and returns true if array contains duplicate values using nested for loops
    public static boolean containsDuplicates(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] == arr[j]) {
                    //if it finds a pair of elements with the same value it will return true
                    return true;
                }
            }
        }
        //if it finds no duplicates it will return false
        return false;
    }

    //taking array of integers as parameter and returns the average of the values in the array as a double
    public static double calculateAverage(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        } //used for loop to add up values in array and then divide the sum by the length of the array
        return (double) sum / arr.length;
    }
    //takes a 2D array of integers as parameter and returns the row of an array with the lowest average value
    public static int[] lowestAverage(int[][] arr) {
        int minAvgIndex = 0;
        double minAvg = Double.MAX_VALUE;
        for (int i = 0; i < arr.length; i++) {
            double sum = 0;
            for (int j = 0; j < arr[i].length; j++) {
                sum += arr[i][j];
            }
            double avg = sum / arr[i].length;
            if (avg < minAvg) {
                minAvg = avg;
                minAvgIndex = i;
            }
        }
        return arr[minAvgIndex];
    }
}
